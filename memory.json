const fs = require('fs');

/**
 * Charge la mémoire depuis un fichier JSON.
 * @param {string} file - Chemin du fichier mémoire
 * @returns {Object} - Objet représentant la mémoire utilisateur
 */
function loadMemory(file) {
  if (fs.existsSync(file)) {
    try {
      const data = fs.readFileSync(file, 'utf8');
      return JSON.parse(data); // Parse JSON correctement
    } catch (err) {
      console.error("Erreur de lecture mémoire :", err);
      return {}; // Retourne un objet vide en cas d'erreur
    }
  }
  return {}; // Si le fichier n'existe pas, retourne un objet vide
}

/**
 * Sauvegarde la mémoire dans un fichier JSON
 * @param {string} file - Chemin du fichier mémoire
 * @param {Object} data - Objet à sauvegarder
 */
function saveMemory(file, data) {
  try {
    fs.writeFileSync(file, JSON.stringify(data, null, 2), 'utf8'); // Format lisible
  } catch (err) {
    console.error("Erreur lors de la sauvegarde mémoire :", err);
  }
}

/**
 * Purge les utilisateurs inactifs et tronque l'historique si trop long
 * @param {Object} userConversations - Objet contenant les conversations
 * @param {number} limitDays - Nombre de jours avant suppression
 * @param {number} messageLimit - Nombre maximum de messages à conserver
 */
function purgeOldMemory(userConversations, limitDays, messageLimit) {
  const now = Date.now();
  for (const userId in userConversations) {
    const user = userConversations[userId];
    if (!user) continue;

    // Suppression si inactif depuis trop longtemps
    if (now - (user.lastInteraction || now) > limitDays * 24 * 60 * 60 * 1000) {
      delete userConversations[userId];
    } 
    // Limitation de l'historique
    else if (Array.isArray(user.history) && user.history.length > messageLimit) {
      user.history.splice(1, user.history.length - messageLimit);
    }
  }
}

module.exports = { loadMemory, saveMemory, purgeOldMemory };
